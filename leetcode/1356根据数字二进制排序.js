/**
 * 给你一个整数数组 arr 。请你将数组中的元素按照其二进制表示中数字 1 的数目升序排序。

如果存在多个数字二进制中 1 的数目相同，则必须将它们按照数值大小升序排列。

请你返回排序后的数组。



示例 1：

输入：arr = [0,1,2,3,4,5,6,7,8]
输出：[0,1,2,4,8,3,5,6,7]
解释：[0] 是唯一一个有 0 个 1 的数。
[1,2,4,8] 都有 1 个 1 。
[3,5,6] 有 2 个 1 。
[7] 有 3 个 1 。
按照 1 的个数排序得到的结果数组为 [0,1,2,4,8,3,5,6,7]
 *
 *
 */
const sortByBits = (arr) => {
    const countB = (n) => {
        let count = 0;
        while (n !== 0) {
            n % 2 === 1 ? count++ : null
            n >>= 1;
        }
        return count;
    }
    return arr.sort((a, b) => {
        return countB(a) - countB(b) || a - b;
    });
}
 /* 1.计算二进制的1方法多种多样，可以通过利用字符串的遍历器去遍历，也可以用无符号左移来计算
 2.sort方法中搭配||运算可以把多种条件搭配起来做判断，题目中要求1的数量相同时判断值本身的大小
 直接使用||a-b就能解决
 3.对sort中的辅助排序函数的返回值如何决定升序还是降序一直不是很能理解透彻
 大概理解如下
 

 */