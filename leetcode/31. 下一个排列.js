/*
实现获取下一个排列的函数，算法需要将给定数字序列重新排列成字典序中下一个更大的排列。

如果不存在下一个更大的排列，则将数字重新排列成最小的排列（即升序排列）。

必须原地修改，只允许使用额外常数空间。

以下是一些例子，输入位于左侧列，其相应输出位于右侧列。
1,2,3 → 1,3,2
3,2,1 → 1,2,3
1,1,5 → 1,5,1


*/
//自己没想出来，抄答案顺便整理下代码格式和添加对应注释

//**双指针解法**

var nextPermutation = function (nums) {
    debugger
    let swap = (l, r, t) => {
        t = nums[l]
        nums[l] = nums[r]
        nums[r] = t
    }

    let l = -1
    let r = nums.length

    //初始待交换位置为-1。倒序找第一个后位置大于前位置，前为待交换位置
    // [1,4,6,3] 这个时候待交换位置为4，l为1 r为3 4找到后，4后面的数一定是降序排列，末尾就是最小值
    //如果只是单纯的和末尾替换。1463变成1364 反而变小了
    //所以需要在待替换位置后找到比待替换位置大且是待替换位置后最小的数
    for (let i = r; i--;) {
        if (nums[i] > nums[i - 1]) {
            l = i - 1
            i = 0
        }
    }
    // [1,4,6,3]=>[1,6,4,3]
    //倒序找第一个大于待交换位置的位置，与待交换位置交换
    if (l !== -1) {
        for (i = r; i-- > l;) {
            if (nums[i] > nums[l]) {
                swap(i, l)
                i = 0
            }
        }
    }
    //确定完最小数之后，剩下的就是要把做指针和右指针之间的数从降序变成升序，才能使得得到的数是“下一个数"
    //从待交换位置 + 1和数组尾部，向中间，双指针交换
    // [1,4,6,3]=>[1,6,3,4]
    while (++l < --r) {
        swap(l, r)
    }
};

